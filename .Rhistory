print(paste("p-value = ",t.test(lang_no_out_NA$C_aCo2, lang_no_out_NA$C_eCo2, paired = TRUE)$p.value))
print("Test de Student entre les données Mg_aCo2 et Mg_eCo2")
print(paste("p-value = ",t.test(lang_no_out_NA$Mg_aCo2, lang_no_out_NA$Mg_eCo2, paired = TRUE)$p.value))
print("Test de Student entre les données Mg_aCo2 et Mg_eCo2")
print(paste("p-value = ",t.test(reg_no_out_NA$Mg_aCo2, reg_no_out_NA$Mg_eCo2, paired = TRUE)$p.value))
print("Test de Student entre les données C_aCo2 et C_eCo2")
print(paste("p-value = ",t.test(reg_no_out_NA$C_aCo2, reg_no_out_NA$C_eCo2, paired = TRUE)$p.value))
print("Test de Student entre les données Cu_aCo2 et Cu_eCo2")
print(paste("p-value = ",t.test(reg_no_out_NA$Cu_aCo2, reg_no_out_NA$Cu_eCo2, paired = TRUE)$p.value))
i=2
while (i < 17) {
plot_paired <- ggpaired(reg_no_out_NA, cond1 = names(reg_no_out_NA[i+1]) , cond2 = names(reg_no_out_NA[i]),
line.color = "dark gray", line.size = 0.6, color = "condition",
width = 0.7, linetype = "dotted" ,
palette = "aas")+
stat_compare_means(paired = TRUE)
print(plot_paired)
i = i+2
}
i=2
while (i < 17) {
plot_paired <- ggpaired(reg_no_out_NA, cond1 = names(reg_no_out_NA[i+1]) , cond2 = names(reg_no_out_NA[i]),
line.color = "dark gray", line.size = 0.6, color = "condition",
width = 0.7, linetype = "dotted" ,
palette = "aas")+
stat_compare_means()
print(plot_paired)
i = i+2
}
library(ggplot2)
library(RColorBrewer)
library(ggpubr)
reg_long = melt(reg_no_out_no_ch)
reg_long$element = stringr::str_split_fixed(reg_long$variable, "_",2)[,1]
reg_long$Co2 = stringr::str_split_fixed(reg_long$variable, "_",2)[,2]
nb.cols <- 16
mycolors <- colorRampPalette(brewer.pal(8, "Paired"))(nb.cols)
ggplot(data = reg_long, aes(x = Co2, y = value)) +
geom_violin(aes(fill = variable), draw_quantiles = c(0.25,0.5,0.75)) +
facet_wrap( ~ element, scales = "free") +
scale_fill_manual(values = mycolors) +
stat_compare_means()
print("Test de Fisher entre les données C_aCo2 et C_eCo2")
print(paste("p-value = ",var.test(lang_no_out_NA$C_aCo2, lang_no_out_NA$C_eCo2, paired = TRUE)$p.value))
print("Test de Student entre les données Mg_aCo2 et Mg_eCo2")
print(paste("p-value = ",var.test(lang_no_out_NA$Mg_aCo2, lang_no_out_NA$Mg_eCo2, paired = TRUE)$p.value))
print("Test de Fisher entre les données Mg_aCo2 et Mg_eCo2")
print(paste("p-value = ",var.test(reg_no_out_NA$Mg_aCo2, reg_no_out_NA$Mg_eCo2, paired = TRUE)$p.value))
print("Test de Fisher entre les données C_aCo2 et C_eCo2")
print(paste("p-value = ",var.test(reg_no_out_NA$C_aCo2, reg_no_out_NA$C_eCo2, paired = TRUE)$p.value))
print("Test de Fisher entre les données Cu_aCo2 et Cu_eCo2")
print(paste("p-value = ",var.test(reg_no_out_NA$Cu_aCo2, reg_no_out_NA$Cu_eCo2, paired = TRUE)$p.value))
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(dplyr)
reg <- read.table("REGMAP_phenotypes.csv",sep=";",h=TRUE,na.strings = ".")
head(reg)
# supression des colonnes inutiles pour l'instant
reg_no_ch <- subset (reg, select = -c(N_change:Zn_change))
reg_clean = reg_no_ch[-c(17,42),]
head(reg_clean)
library(ggplot2)
ggplot(data= reg_clean, aes(x =Fe_aCo2, y = Fe_eCo2))+
geom_point()+
geom_abline(a=0, b=1,col="blue")
library(ggplot2)
ggplot(data= reg_clean, aes(x =Zn_aCo2, y = Zn_eCo2))+
geom_point()+
geom_abline(a=0, b=1,col="blue")
reg_no_out <- reg_clean
k= 3
for (i in 2:17) {
binf <- median(reg_clean[,i]) - k* mad(reg_clean[,i])
bsup <- median(reg_clean[,i]) + k* mad(reg_clean[,i])
outlier_idx <- which(reg_no_out[,i] < binf | reg_no_out[,i] > bsup)
if (length(outlier_idx) == 0) {
reg_no_out = reg_no_out
}
else{
reg_no_out = reg_no_out[-c(outlier_idx),]
}
#print(outlier_idx)
}
library(naniar)
k= 3
reg_no_out_NA <- reg_clean
for (i in 2:17) {
binf <- median(reg_clean[,i]) - k* mad(reg_clean[,i])
bsup <- median(reg_clean[,i]) + k* mad(reg_clean[,i])
outlier_idx <- which(reg_no_out_NA[,i] < binf | reg_no_out_NA[,i] > bsup)
if (length(outlier_idx) == 0) {
reg_no_out_NA = reg_no_out_NA
}
else{
reg_no_out_NA[c(outlier_idx),i] =NA
}
}
library(tidyverse)
reg_no_out_ch <- reg_no_out_NA
reg_no_out_ch <- mutate(reg_no_out_ch,N_change = round(((reg_no_out_NA$N_eCo2-reg_no_out_NA$N_aCo2)/reg_no_out_NA$N_aCo2)*100, digits = 2)
)
reg_no_out_ch <- mutate(reg_no_out_ch,Fe_change = round(((reg_no_out_NA$Fe_eCo2-reg_no_out_NA$Fe_aCo2)/reg_no_out_NA$Fe_aCo2)*100, digits = 2)
)
reg_no_out_ch <- mutate(reg_no_out_ch,Mg_change = round(((reg_no_out_NA$Mg_eCo2-reg_no_out_NA$Mg_aCo2)/reg_no_out_NA$Mg_aCo2)*100, digits = 2)
)
reg_no_out_ch <- mutate(reg_no_out_ch,Mn_change = round(((reg_no_out_NA$Mn_eCo2-reg_no_out_NA$Mn_aCo2)/reg_no_out_NA$Mn_aCo2)*100, digits = 2)
)
reg_no_out_ch <- mutate(reg_no_out_ch,Na_change = round(((reg_no_out_NA$Na_eCo2-reg_no_out_NA$Na_aCo2)/reg_no_out_NA$Na_aCo2)*100, digits = 2)
)
reg_no_out_ch <- mutate(reg_no_out_ch,Zn_change = round(((reg_no_out_NA$Zn_eCo2-reg_no_out_NA$Zn_aCo2)/reg_no_out_NA$Zn_aCo2)*100, digits = 2)
)
reg_no_out_ch <- mutate(reg_no_out_ch,C_change = round(((reg_no_out_NA$C_eCo2-reg_no_out_NA$C_aCo2)/reg_no_out_NA$C_aCo2)*100, digits = 2)
)
reg_no_out_ch <- mutate(reg_no_out_ch,Cu_change = round(((reg_no_out_NA$Cu_eCo2-reg_no_out_NA$Cu_aCo2)/reg_no_out_NA$Cu_aCo2)*100, digits = 2)
)
reg_ch <- select(reg_no_out_ch,"genotype"|contains("change"))
reg_chl <- gather(data = reg_ch, key = "element", value = "valeur", 2:9)
head(reg_no_out_ch)
library(ggplot2)
library(hrbrthemes)
library(viridis)
ggplot(reg_chl, aes(element, valeur, fill = element))+
stat_summary(fun = mean, geom = "bar") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.2)+
geom_hline(yintercept = 0, color = "red", linetype = "dashed", size = 1) +
scale_fill_viridis_d() +
scale_color_viridis_d() +
theme_bw()
i = 2
while (i < 17) {
print(
ggplot(data= reg_no_out_NA, aes(x =reg_no_out_NA[,i+1], y = reg_no_out_NA[,i]))+
geom_point()+
xlab(colnames(reg)[i+1]) + ylab(colnames(reg)[i])+
geom_abline(slope = 1, intercept = 1,col="blue")
)
i = i + 2}
library(reshape2)
library(ggplot2)
library(dplyr)
reg_no_out_no_ch = reg_no_out_NA
reg_long = melt(reg_no_out_no_ch)
ggplot(data= reg_long, aes(x=variable, y=value))+
geom_violin(aes(fill=variable))+
geom_jitter(alpha=0.2)+
facet_wrap(~variable,scales ="free")+
ggtitle("Violin plots de chaque élément")
#print(shapiro.test(reg_no_out_NA[,i]))
ggplot(data= reg_long, aes(x=value))+
geom_histogram()+
facet_wrap(~variable,scales ="free")+
ggtitle("histogramme de chaque élément")
i = 2
while (i < 18) {
ggplot(data= reg_no_out_no_ch, aes(sample=reg_no_out_no_ch[,i]))+
stat_qq()+
facet_wrap(~reg_no_out_no_ch[,i],scales ="free")+
ggtitle("qqplot de chaque élément")
i=i+1
}
i = 2
while (i < 18) {
print(paste("Test de Shapiro entre les données", names(reg_no_out_NA[i])))
print(shapiro.test(reg_no_out_NA[,i])$p.value)
i = i + 1
}
library(ggplot2)
library(RColorBrewer)
library(ggpubr)
reg_long = melt(reg_no_out_no_ch)
reg_long$element = stringr::str_split_fixed(reg_long$variable, "_",2)[,1]
reg_long$Co2 = stringr::str_split_fixed(reg_long$variable, "_",2)[,2]
nb.cols <- 16
mycolors <- colorRampPalette(brewer.pal(8, "Paired"))(nb.cols)
ggplot(data = reg_long, aes(x = Co2, y = value)) +
geom_violin(aes(fill = variable), draw_quantiles = c(0.25,0.5,0.75)) +
facet_wrap( ~ element, scales = "free") +
scale_fill_manual(values = mycolors) +
stat_compare_means()
i=2
while (i < 17) {
plot_paired <- ggpaired(reg_no_out_NA, cond1 = names(reg_no_out_NA[i+1]) , cond2 = names(reg_no_out_NA[i]),
line.color = "dark gray", line.size = 0.6, color = "condition",
width = 0.7, linetype = "dotted" ,
palette = "aas")+
stat_compare_means()
print(plot_paired)
i = i+2
}
print("Test de Student entre les données Mg_aCo2 et Mg_eCo2")
print(paste("p-value = ",t.test(reg_no_out_NA$Mg_aCo2, reg_no_out_NA$Mg_eCo2, paired = TRUE)$p.value))
print("Test de Student entre les données C_aCo2 et C_eCo2")
print(paste("p-value = ",t.test(reg_no_out_NA$C_aCo2, reg_no_out_NA$C_eCo2, paired = TRUE)$p.value))
print("Test de Student entre les données Cu_aCo2 et Cu_eCo2")
print(paste("p-value = ",t.test(reg_no_out_NA$Cu_aCo2, reg_no_out_NA$Cu_eCo2, paired = TRUE)$p.value))
library(lawstat)
i = 2
while (i < 17) {
print(paste("Test de Levene entre les données", names(reg_no_out_NA[i]), "et", names(reg_no_out_NA[i+1])))
a = reg_no_out_NA[,i+1]
e = reg_no_out_NA[,i]
values = c(a,e)
factor = c(rep('aCo2',length(a)), rep('eCo2',length(e)))
isna = which(!is.na(values))
factor = factor[isna]
values = values[isna]
print(paste("p-value = ",levene.test(values, factor)$p.value))
i = i + 2
}
View(reg)
View(plot_paired)
library(lawstat)
i = 2
while (i < 17) {
print(paste("Test de Levene entre les données", names(reg_no_out_NA[i]), "et", names(reg_no_out_NA[i+1])))
a = reg_no_out_NA[,i+1]
e = reg_no_out_NA[,i]
values = c(a,e)
factor = c(rep('aCo2',length(a)), rep('eCo2',length(e)))
isna = which(!is.na(values))
factor = factor[isna]
values = values[isna]
print(paste("p-value = ",levene.test(values, factor)))
i = i + 2
}
library(lawstat)
i = 2
while (i < 17) {
print(paste("Test de Levene entre les données", names(reg_no_out_NA[i]), "et", names(reg_no_out_NA[i+1])))
a = reg_no_out_NA[,i+1]
e = reg_no_out_NA[,i]
values = c(a,e)
factor = c(rep('aCo2',length(a)), rep('eCo2',length(e)))
isna = which(!is.na(values))
factor = factor[isna]
values = values[isna]
print(levene.test(values, factor))
i = i + 2
}
print("Test de Fisher entre les données Mg_aCo2 et Mg_eCo2")
print(paste("p-value = ",var.test(reg_no_out_NA$Mg_aCo2, reg_no_out_NA$Mg_eCo2, paired = TRUE)))
print("Test de Fisher entre les données C_aCo2 et C_eCo2")
print(paste("p-value = ",var.test(reg_no_out_NA$C_aCo2, reg_no_out_NA$C_eCo2, paired = TRUE)))
print("Test de Fisher entre les données Cu_aCo2 et Cu_eCo2")
print(paste("p-value = ",var.test(reg_no_out_NA$Cu_aCo2, reg_no_out_NA$Cu_eCo2, paired = TRUE)))
print("Test de Fisher entre les données Mg_aCo2 et Mg_eCo2")
print(var.test(reg_no_out_NA$Mg_aCo2, reg_no_out_NA$Mg_eCo2, paired = TRUE))
print("Test de Fisher entre les données C_aCo2 et C_eCo2")
print(var.test(reg_no_out_NA$C_aCo2, reg_no_out_NA$C_eCo2, paired = TRUE))
print("Test de Fisher entre les données Cu_aCo2 et Cu_eCo2")
print(var.test(reg_no_out_NA$Cu_aCo2, reg_no_out_NA$Cu_eCo2, paired = TRUE))
library(lawstat)
i = 2
while (i < 17) {
print(paste("Test de Levene entre les données", names(reg_no_out_NA[i]), "et", names(reg_no_out_NA[i+1])))
a = reg_no_out_NA[,i+1]
e = reg_no_out_NA[,i]
values = c(a,e)
factor = c(rep('aCo2',length(a)), rep('eCo2',length(e)))
isna = which(!is.na(values))
factor = factor[isna]
values = values[isna]
print(levene.test(values, factor)$p.value)
print(paste("aCO2",var(a)))
print(paste("eCO2",var(e)))
i = i + 2
}
while (i < 17) {
print(var(reg_no_out_NA[,i]))
i=i+1
}
var(reg_no_out_NA[,i])
for(i in names(reg_no_out_NA)) {
print(var(reg_no_out_NA$i))
}
sapply(reg_no_out_NA, var)
View(toua_no_out_NA)
sapply(reg_no_out_NA, var(na.rm=TRUE))
#sapply(reg_no_out_NA, var(na.rm=TRUE))
sapply(reg_no_out_NA, function(x)  var=var(x,na.rm=TRUE)))
#sapply(reg_no_out_NA, var(na.rm=TRUE))
sapply(reg_no_out_NA, function(x)  var=var(x,na.rm=TRUE))
#sapply(reg_no_out_NA, var(na.rm=TRUE))
sapply(reg_no_out_NA, function(x)  var=var(x,na.rm=TRUE))
#sapply(reg_no_out_NA, var(na.rm=TRUE))
sapply(toua_no_out_NA, function(x)  var=var(x,na.rm=TRUE))
#sapply(reg_no_out_NA, var(na.rm=TRUE))
sapply(lang_no_out_NA, function(x)  var=var(x,na.rm=TRUE))
library(ggplot2)
library(RColorBrewer)
toua_long = melt(toua_no_out_no_ch)
toua_long$element = stringr::str_split_fixed(toua_long$variable, "_",2)[,1]
toua_long$Co2 = stringr::str_split_fixed(toua_long$variable, "_",2)[,2]
nb.cols <- 16
mycolors <- colorRampPalette(brewer.pal(8, "Paired"))(nb.cols)
ggplot(data = toua_long, aes(x = Co2, y = value)) +
geom_violin(aes(fill = variable), draw_quantiles = c(0.25,0.5,0.75)) +
facet_wrap( ~ element, scales = "free") +
scale_fill_manual(values = mycolors) +
stat_compare_means( method = "wilcox", na.rm = TRUE)
i=2
while (i < 17) {
plot_paired <- ggpaired(lang_no_out_NA, cond1 = names(lang_no_out_NA[i+1]) , cond2 = names(lang_no_out_NA[i]),
line.color = "dark gray", line.size = 0.6, color = "condition",
width = 0.7, linetype = "dotted" ,
palette = "aas")+
stat_compare_means()
print(plot_paired)
i = i+2
}
knitr::opts_chunk$set(echo = TRUE)
ggplot(df_trois_pop_chl, aes(element, valeur, fill = element))+
stat_summary(fun = "mean", geom = "bar") +
stat_summary(fun.data = mean_se , geom = "errorbar", width = 0.2)+
geom_hline(yintercept = 0, color = "red", linetype = "dashed", size = 1) +
scale_fill_viridis_d() +
scale_color_viridis_d() +
theme_bw()+
ylab(label="évolution relative entre Co2 ambiant et élevé (%)")+
labs(title ="Evolution relative entre condition de Co2 ambiant et élevé ", subtitle = "pour chaque élément en regroupant toutes les populations")
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(dplyr)
library(ggpubr)
toua <- read.csv2("TOUA_phenotypes.csv")
reg <- read.table("REGMAP_phenotypes.csv",sep=";",h=TRUE,na.strings = ".")
lang <- read.table("LANGUEDOC_phenotypes.csv",sep=";",h=TRUE,na.strings = ".")
# supression des colonnes inutiles pour l'instant
reg_no_ch <- subset (reg, select = -c(N_change:Zn_change))
reg_clean = reg_no_ch[-c(17,42),]
lang_no_ch <- subset (lang, select = -c(N_change:Zn_change))
lang_clean = lang_no_ch[-c(10,13,109,116,123,131,150,151,179,180,187,189),]
library(naniar)
k= 3
toua_no_out_NA <- toua[1:17]
for (i in 2:17) {
binf <- median(toua[,i]) - k* mad(toua[,i])
bsup <- median(toua[,i]) + k* mad(toua[,i])
outlier_idx <- which(toua_no_out_NA[,i] < binf | toua_no_out_NA[,i] > bsup)
if (length(outlier_idx) == 0) {
toua_no_out_NA = toua_no_out_NA
}
else{
toua_no_out_NA[c(outlier_idx),i] =NA
}
}
library(naniar)
k= 3
reg_no_out_NA <- reg_clean
for (i in 2:17) {
binf <- median(reg_clean[,i]) - k* mad(reg_clean[,i])
bsup <- median(reg_clean[,i]) + k* mad(reg_clean[,i])
outlier_idx <- which(reg_no_out_NA[,i] < binf | reg_no_out_NA[,i] > bsup)
if (length(outlier_idx) == 0) {
reg_no_out_NA = reg_no_out_NA
}
else{
reg_no_out_NA[c(outlier_idx),i] =NA
}
}
library(naniar)
k= 3
lang_no_out_NA <- lang_clean
for (i in 2:17) {
binf <- median(lang_clean[,i]) - k* mad(lang_clean[,i])
bsup <- median(lang_clean[,i]) + k* mad(lang_clean[,i])
outlier_idx <- which(lang_no_out_NA[,i] < binf | lang_no_out_NA[,i] > bsup)
if (length(outlier_idx) == 0) {
lang_no_out_NA = lang_no_out_NA
}
else{
lang_no_out_NA[c(outlier_idx),i] =NA
}
}
# Ajout des nouvelles colonnes
toua_no_out_NA$N_change <- round(((toua_no_out_NA$N_eCo2-toua_no_out_NA$N_aCo2)/toua_no_out_NA$N_aCo2)*100, digits = 2)
toua_no_out_NA$Fe_change <- round(((toua_no_out_NA$Fe_eCo2-toua_no_out_NA$Fe_aCo2)/toua_no_out_NA$Fe_aCo2)*100, digits = 2)
toua_no_out_NA$Mg_change <- round(((toua_no_out_NA$Mg_eCo2-toua_no_out_NA$Mg_aCo2)/toua_no_out_NA$Mg_aCo2)*100, digits = 2)
toua_no_out_NA$Mn_change <- round(((toua_no_out_NA$Mn_eCo2-toua_no_out_NA$Mn_aCo2)/toua_no_out_NA$Mn_aCo2)*100, digits = 2)
toua_no_out_NA$Na_change <- round(((toua_no_out_NA$Na_eCo2-toua_no_out_NA$Na_aCo2)/toua_no_out_NA$Na_aCo2)*100, digits = 2)
toua_no_out_NA$Zn_change <- round(((toua_no_out_NA$Zn_eCo2-toua_no_out_NA$Zn_aCo2)/toua_no_out_NA$Zn_aCo2)*100, digits = 2)
toua_no_out_NA$C_change <- round(((toua_no_out_NA$C_eCo2-toua_no_out_NA$C_aCo2)/toua_no_out_NA$C_aCo2)*100, digits = 2)
toua_no_out_NA$Cu_change <- round(((toua_no_out_NA$Cu_eCo2-toua_no_out_NA$Cu_aCo2)/toua_no_out_NA$Cu_aCo2)*100, digits = 2)
library(tidyverse)
reg_no_out_ch <- reg_no_out_NA
reg_no_out_ch <- mutate(reg_no_out_ch,N_change = round(((reg_no_out_NA$N_eCo2-reg_no_out_NA$N_aCo2)/reg_no_out_NA$N_aCo2)*100, digits = 2)
)
reg_no_out_ch <- mutate(reg_no_out_ch,Fe_change = round(((reg_no_out_NA$Fe_eCo2-reg_no_out_NA$Fe_aCo2)/reg_no_out_NA$Fe_aCo2)*100, digits = 2)
)
reg_no_out_ch <- mutate(reg_no_out_ch,Mg_change = round(((reg_no_out_NA$Mg_eCo2-reg_no_out_NA$Mg_aCo2)/reg_no_out_NA$Mg_aCo2)*100, digits = 2)
)
reg_no_out_ch <- mutate(reg_no_out_ch,Mn_change = round(((reg_no_out_NA$Mn_eCo2-reg_no_out_NA$Mn_aCo2)/reg_no_out_NA$Mn_aCo2)*100, digits = 2)
)
reg_no_out_ch <- mutate(reg_no_out_ch,Na_change = round(((reg_no_out_NA$Na_eCo2-reg_no_out_NA$Na_aCo2)/reg_no_out_NA$Na_aCo2)*100, digits = 2)
)
reg_no_out_ch <- mutate(reg_no_out_ch,Zn_change = round(((reg_no_out_NA$Zn_eCo2-reg_no_out_NA$Zn_aCo2)/reg_no_out_NA$Zn_aCo2)*100, digits = 2)
)
reg_no_out_ch <- mutate(reg_no_out_ch,C_change = round(((reg_no_out_NA$C_eCo2-reg_no_out_NA$C_aCo2)/reg_no_out_NA$C_aCo2)*100, digits = 2)
)
reg_no_out_ch <- mutate(reg_no_out_ch,Cu_change = round(((reg_no_out_NA$Cu_eCo2-reg_no_out_NA$Cu_aCo2)/reg_no_out_NA$Cu_aCo2)*100, digits = 2)
)
library(tidyverse)
lang_no_out_ch <- lang_no_out_NA
lang_no_out_ch <- mutate(lang_no_out_ch,N_change = round(((lang_no_out_NA$N_eCo2-lang_no_out_NA$N_aCo2)/lang_no_out_NA$N_aCo2)*100, digits = 2)
)
lang_no_out_ch <- mutate(lang_no_out_ch,Fe_change = round(((lang_no_out_NA$Fe_eCo2-lang_no_out_NA$Fe_aCo2)/lang_no_out_NA$Fe_aCo2)*100, digits = 2)
)
lang_no_out_ch <- mutate(lang_no_out_ch,Mg_change = round(((lang_no_out_NA$Mg_eCo2-lang_no_out_NA$Mg_aCo2)/lang_no_out_NA$Mg_aCo2)*100, digits = 2)
)
lang_no_out_ch <- mutate(lang_no_out_ch,Mn_change = round(((lang_no_out_NA$Mn_eCo2-lang_no_out_NA$Mn_aCo2)/lang_no_out_NA$Mn_aCo2)*100, digits = 2)
)
lang_no_out_ch <- mutate(lang_no_out_ch,Na_change = round(((lang_no_out_NA$Na_eCo2-lang_no_out_NA$Na_aCo2)/lang_no_out_NA$Na_aCo2)*100, digits = 2)
)
lang_no_out_ch <- mutate(lang_no_out_ch,Zn_change = round(((lang_no_out_NA$Zn_eCo2-lang_no_out_NA$Zn_aCo2)/lang_no_out_NA$Zn_aCo2)*100, digits = 2)
)
lang_no_out_ch <- mutate(lang_no_out_ch,C_change = round(((lang_no_out_NA$C_eCo2-lang_no_out_NA$C_aCo2)/lang_no_out_NA$C_aCo2)*100, digits = 2)
)
lang_no_out_ch <- mutate(lang_no_out_ch,Cu_change = round(((lang_no_out_NA$Cu_eCo2-lang_no_out_NA$Cu_aCo2)/lang_no_out_NA$Cu_aCo2)*100, digits = 2)
)
toua_ch <- select(toua_no_out_NA,"genotype"|contains("change"))
toua_chl <- gather(data = toua_ch, key = "element", value = "valeur", 2:9)
reg_ch <- select(reg_no_out_ch,"genotype"|contains("change"))
reg_chl <- gather(data = reg_ch, key = "element", value = "valeur", 2:9)
lang_ch <- select(lang_no_out_ch,"genotype"|contains("change"))
lang_chl <- gather(data = lang_ch, key = "element", value = "valeur", 2:9)
toua_no_out_no_ch = toua_no_out_NA
toua_no_out_no_ch = subset (toua_no_out_no_ch, select = -c(N_change:Cu_change))
toua_long = melt(toua_no_out_no_ch)
toua_long$element = stringr::str_split_fixed(toua_long$variable, "_",2)[,1]
toua_long$Co2 = stringr::str_split_fixed(toua_long$variable, "_",2)[,2]
reg_no_out_no_ch = reg_no_out_NA
reg_long = melt(reg_no_out_no_ch)
reg_long$element = stringr::str_split_fixed(reg_long$variable, "_",2)[,1]
reg_long$Co2 = stringr::str_split_fixed(reg_long$variable, "_",2)[,2]
lang_no_out_no_ch = lang_no_out_NA
lang_long = melt(lang_no_out_no_ch)
lang_long$element = stringr::str_split_fixed(lang_long$variable, "_",2)[,1]
lang_long$Co2 = stringr::str_split_fixed(lang_long$variable, "_",2)[,2]
toua_long$pop = "TOUA"
reg_long$pop = "REG"
lang_long$pop = "LANG"
df_trois_pop = rbind(toua_long, reg_long, lang_long)
toua_chl$pop = "TOUA"
reg_chl$pop = "REG"
lang_chl$pop = "LANG"
df_trois_pop_chl = rbind(toua_chl, reg_chl, lang_chl)
library(ggplot2)
library(hrbrthemes)
library(viridis)
ggplot(df_trois_pop_chl, aes(element, valeur, fill = element))+
stat_summary(fun = "mean", geom = "bar") +
stat_summary(fun.data = mean_se , geom = "errorbar", width = 0.2)+
geom_hline(yintercept = 0, color = "red", linetype = "dashed", size = 1) +
scale_fill_viridis_d() +
scale_color_viridis_d() +
theme_bw()+
ylab(label="évolution relative entre Co2 ambiant et élevé (%)")+
labs(title ="Evolution relative entre condition de Co2 ambiant et élevé ", subtitle = "pour chaque élément en regroupant toutes les populations")
ggplot(df_trois_pop_chl, aes(element, valeur, color = pop))+
stat_summary(fun = mean, geom = "point", size = 3) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.2, size = 1.5)+
geom_hline(yintercept = 0, color = "red", linetype = "dashed" ) +
scale_fill_viridis_d() +
scale_color_viridis_d() +
theme_bw()+
ylab("évolution relative entre Co2 ambiant et élevé (%)")+
labs(title =  "Evolution relative entre condition de Co2 ambiant et élevé ", subtitle = "pour chaque élément et pour chaque population")
library(reshape2)
library(ggplot2)
library(dplyr)
reg_no_out_no_ch = reg_no_out_NA
reg_long = melt(reg_no_out_no_ch)
ggplot(data= reg_long, aes(x=variable, y=value))+
geom_violin(aes(fill=variable))+
geom_jitter(alpha=0.2)+
facet_wrap(~variable,scales ="free")+
ggtitle("Violin plots de chaque élément")
library(reshape2)
library(ggplot2)
library(dplyr)
reg_no_out_no_ch = reg_no_out_NA
reg_long = melt(reg_no_out_no_ch)
gviolin = ggplot(data= reg_long, aes(x=variable, y=value))+
geom_violin(aes(fill=variable))+
geom_jitter(alpha=0.2)+
facet_wrap(~variable,scales ="free")+
ggtitle("Violin plots de chaque élément")
View(gviolin)
View(gviolin)
library(reshape2)
library(ggplot2)
library(dplyr)
reg_no_out_no_ch = reg_no_out_NA
reg_long = melt(reg_no_out_no_ch)
gviolin = ggplot(data= reg_long, aes(x=variable, y=value))+
geom_violin(aes(fill=variable))+
geom_jitter(alpha=0.2)+
facet_wrap(~variable,scales ="free")+
ggtitle("Violin plots de chaque élément")
library(reshape2)
library(ggplot2)
library(dplyr)
reg_no_out_no_ch = reg_no_out_NA
reg_long = melt(reg_no_out_no_ch)
gviolin = ggplot(data= reg_long, aes(x=variable, y=value))+
geom_violin(aes(fill=variable))+
geom_jitter(alpha=0.2)+
facet_wrap(~variable,scales ="free")+
ggtitle("Violin plots de chaque élément")
print(gviolin)
View(gviolin)
gviolin
