## Test de normalité
```{r}
for (i in 2:17) {
hist(toua_no_out[,i], xlab = names(toua_no_out[i]), main = paste("Histogram of", names(toua_no_out[i])))
print(paste("Test de Shapiro pour la donnée", names(toua_no_out[i])))
print(shapiro.test(toua_no_out[,i]))
}
```
### Test de significativité sur les moyennes
# Ici on a choisi un test de Wilcoxon ( car on ne respecte pas les pre-requis pour un test parametrique) pour des valeurs paired, car la mesure en Co2 ambiant et élevé sont réalisés sur les mêmes genotypes.
```{r}
i = 2
while (i < 17) {
print(paste("Test de Wilcoxon entre les données", names(toua_no_out[i]), "et", names(toua_no_out[i+1])))
print(wilcox.test(toua_no_out[,i+1], toua_no_out[,i], paired = TRUE))
i = i + 2
}
```
## Graphe contenant les p value
```{r}
library(ggpubr)
```
```{r}
i=2
while (i < 17) {
plot_paired <- ggpaired(toua_no_out, cond1 = names(toua_no_out[i+1]) , cond2 = names(toua_no_out[i]),
line.color = "dark gray", line.size = 0.6, color = "condition",
width = 0.7, linetype = "dotted" ,
palette = "aas")+
stat_compare_means(paired = TRUE)
print(plot_paired)
i = i+2
}
```
#Normalisation des donn?es
library(heatmaply)
toua_no_out_normalized=normalize(toua_no_out)
for (i in 2:17) {
hist(toua_no_out_normalized[,i], xlab = names(toua_no_out_normalized[i]), main = paste("Histogram de normalisation of", names(toua_no_out_normalized[i])))}
#Test de normalit? (pour verifier)
for (i in 2:17) {
hist(toua_no_out_normalized[,i], xlab = names(toua_no_out_normalized[i]), main = paste("Histogram de test de normalite of", names(toua_no_out_normalized[i])))
print(paste("Test de Shapiro pour la donnée", names(toua_no_out_normalized[i])))
print(shapiro.test(toua_no_out_normalized[,i]))
}
#OK
#Test du Student bilateral (comparaison des moyennes)
i = 2
while (i < 17) {
print(paste("Test de Student entre les données", names(toua_no_out_normalized[i]), "et", names(toua_no_out_normalized[i+1])))
print(t.test(toua_no_out_normalized[,i+1], toua_no_out_normalized[,i], alternative=c("two.sided")))
i = i + 2
}
setwd("D:/TERPlantesADN")
setwd("D:/TERPlantesADN")
setwd("D:/TERPlantesADN")
install.packages(ggpubr)
?ggpubr
??ggpubr
install.packages("ggpubr")
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(dplyr)
toua <- read.csv2("TOUA_phenotypes.csv")
head(toua)
toua$C_change <- round(((toua$C_eCo2-toua$C_aCo2)/toua$C_aCo2)*100, digits = 2)
toua$Cu_change <- round(((toua$Cu_eCo2-toua$Cu_aCo2)/toua$Cu_aCo2)*100, digits = 2)
toua_ch <- select(toua,"genotype"|contains("change"))
toua_chl <- gather(data = toua_ch, key = "element", value = "valeur", 2:9)
head(toua_chl)
#unique(toua_chl$element)
attach(toua)
plot(Fe_aCo2, Fe_eCo2, main="Scatterplot Fe",
xlab="Fe_aCo2", ylab="Fe_eCo2", pch=19)
abline(0,1, col = "blue")
abline(lm(Fe_eCo2~Fe_aCo2), col="red") # regression line (y~x)
attach(toua)
plot(Zn_aCo2, Zn_eCo2, main="Scatterplot Zinc",
xlab="Zn_aCo2", ylab="Zn_eCo2")
abline(lm(Zn_eCo2~Zn_aCo2), col="red") # regression line (y~x)
abline(0,1, col = "blue")
toua_no_out <- toua
k= 3
for (i in 2:17) {
binf <- mean(toua[,i]) - k* sd(toua[,i])
bsup <- mean(toua[,i]) + k* sd(toua[,i])
outlier_idx <- which(toua_no_out[,i] < binf | toua_no_out[,i] > bsup)
if (length(outlier_idx) == 0) {
toua_no_out = toua_no_out
}
else{
toua_no_out = toua_no_out[-c(outlier_idx),]
}
print(outlier_idx)
}
library(ggplot2)
library(hrbrthemes)
library(viridis)
ggplot(toua_chl, aes(element, valeur, fill = element))+
stat_summary(fun = mean, geom = "bar") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.2)+
geom_hline(yintercept = 0, color = "red", linetype = "dashed", size = 1) +
scale_fill_viridis_d() +
scale_color_viridis_d() +
theme_bw()
ggplot(toua_chl, aes(x = element, y=valeur, fill = element)) +
geom_violin()
ggplot(toua_chl, aes(x = element, y=valeur, fill = element)) +
geom_violin()+
ylim(-100,500)
toua_FC <- toua
toua_FC$C_FC <- toua$C_eCo2/toua$C_aCo2
toua_FC$Cu_FC <- toua$Cu_eCo2/toua$Cu_aCo2
toua_FC$Fe_FC <- toua$Fe_eCo2/toua$Fe_aCo2
toua_FC$Mg_FC <- toua$Mg_eCo2/toua$Mg_aCo2
toua_FC$Mn_FC <- toua$Mn_eCo2/toua$Mn_aCo2
toua_FC$N_FC <- toua$N_eCo2/toua$N_aCo2
toua_FC$Na_FC <- toua$Na_eCo2/toua$Na_aCo2
toua_FC$Zn_FC <- toua$Zn_eCo2/toua$Zn_aCo2
toua_FC <- select(toua_FC,"genotype"|contains("FC"))
toua_FC <- gather(data = toua_FC, key = "element", value = "valeur", 2:9)
library(hrbrthemes)
ggplot(toua_FC, aes(x = element, y=valeur, fill = element)) +
geom_violin()+
geom_hline(yintercept = 1) +
scale_y_continuous( breaks= waiver(), trans = "log10") +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE)
toua$aNC_ratio <- toua$N_aCo2/toua$C_aCo2
toua$eNC_ratio <- toua$N_eCo2/toua$C_eCo2
library(ggplot2)
ggplot(data= toua, aes(x =aCN_ratio, y = eCN_ratio))+
geom_point()+
geom_abline(a=0, b=1,col="blue")
library(ggplot2)
ggplot(data= toua, aes(x =aNC_ratio, y = eNC_ratio))+
geom_point()+
geom_abline(a=0, b=1,col="blue")
i = 2
while (i < 17) {
plot(toua_no_out[,i+1], toua_no_out[,i], xlab = names(toua_no_out[i+1]), ylab = names(toua_no_out[i]))
abline(0,1, col = "blue")
i = i + 2}
attach(toua)
hist(toua$Cu_eCo2)
shapiro.test(toua$Cu_eCo2)
hist(toua$Cu_aCo2)
shapiro.test(toua$Cu_aCo2)
hist(toua$C_aCo2)
shapiro.test(toua$C_aCo2)
k= 3
binf_md <- median(toua$Zn_eCo2) - k * mad(toua$Zn_eCo2) # calcule la borne inf de l'intervalle
binf_md
binf_mn <- mean(toua$Zn_eCo2) - k* sd(toua$Zn_eCo2)
binf_mn
bsup_md <- median(toua$Zn_eCo2) + k*mad(toua$Zn_eCo2) # calcule la borne sup de l'intervalle
bsup_md
bsup_mn <- mean(toua$Zn_eCo2) + k* sd(toua$Zn_eCo2)
bsup_mn
outlier_idx <- which(toua$Zn_eCo2 < binf_mn | toua$Zn_eCo2 > bsup_mn)
outlier_idx
df = toua[-c(outlier_idx),]
for (i in 2:17) {
hist(toua_no_out[,i], xlab = names(toua_no_out[i]), main = paste("Histogram of", names(toua_no_out[i])))
print(paste("Test de Shapiro pour la donnée", names(toua_no_out[i])))
print(shapiro.test(toua_no_out[,i]))
}
i = 2
while (i < 17) {
print(paste("Test de Wilcoxon entre les données", names(toua_no_out[i]), "et", names(toua_no_out[i+1])))
print(wilcox.test(toua_no_out[,i+1], toua_no_out[,i], paired = TRUE))
i = i + 2
}
library(ggpubr)
i=2
while (i < 17) {
plot_paired <- ggpaired(toua_no_out, cond1 = names(toua_no_out[i+1]) , cond2 = names(toua_no_out[i]),
line.color = "dark gray", line.size = 0.6, color = "condition",
width = 0.7, linetype = "dotted" ,
palette = "aas")+
stat_compare_means(paired = TRUE)
print(plot_paired)
i = i+2
}
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
ggplot(data= toua, aes(x =aCN_ratio, y = eCN_ratio),asp=1)+
geom_point()+
geom_abline(a=0, b=1,col="blue")
library(ggplot2)
ggplot(data= toua, aes(x =aCN_ratio, y = eCN_ratio))+
geom_point()+
geom_abline(a=0, b=1,col="blue")
i = 2
while (i < 17) {
plot(toua_no_out[,i+1], toua_no_out[,i], xlab = names(toua_no_out[i+1]), ylab = names(toua_no_out[i]), asp=1)
abline(0,1, col = "blue")
i = i + 2}
library(ggplot2)
ggplot(data= toua, aes(x =aCN_ratio, y = eCN_ratio),xlim == ylim)+
geom_point()+
geom_abline(a=0, b=1,col="blue")
i = 2
while (i < 17) {
plot(toua_no_out[,i+1], toua_no_out[,i], xlab = names(toua_no_out[i+1]), ylab = names(toua_no_out[i]), xlim == ylim)
abline(0,1, col = "blue")
i = i + 2}
i = 2
while (i < 17) {
plot(toua_no_out[,i+1], toua_no_out[,i], xlab = names(toua_no_out[i+1]), ylab = names(toua_no_out[i]))
abline(0,1, col = "blue")
i = i + 2}
i = 2
while (i < 17) {
plot(toua_no_out[,i+1], toua_no_out[,i], xlab = names(toua_no_out[i+1]), ylab = names(toua_no_out[i])asp=1)
i = 2
while (i < 17) {
plot(toua_no_out[,i+1], toua_no_out[,i], xlab = names(toua_no_out[i+1]), ylab = names(toua_no_out[i]),asp=1)
abline(0,1, col = "blue")
i = i + 2}
knitr::opts_chunk$set(echo = TRUE)
for (i in 2:17) {
#hist(toua_no_out[,i], xlab = names(toua_no_out[i]), main = paste("Histogram of", names(toua_no_out[i])))
ggplot(toua_no_out, aes(x=names(toua_no_out[i])) + geom_histogram())
print(paste("Test de Shapiro pour la donnée", names(toua_no_out[i])))
print(shapiro.test(toua_no_out[,i]))
}
for (i in 2:17) {
#hist(toua_no_out[,i], xlab = names(toua_no_out[i]), main = paste("Histogram of", names(toua_no_out[i])))
ggplot2(toua_no_out, aes(x=names(toua_no_out[i])) + geom_histogram())
print(paste("Test de Shapiro pour la donnée", names(toua_no_out[i])))
print(shapiro.test(toua_no_out[,i]))
}
library(ggplot2)
for (i in 2:17) {
#hist(toua_no_out[,i], xlab = names(toua_no_out[i]), main = paste("Histogram of", names(toua_no_out[i])))
ggplot(toua_no_out, aes(x=names(toua_no_out[i])) + geom_histogram())
print(paste("Test de Shapiro pour la donnée", names(toua_no_out[i])))
print(shapiro.test(toua_no_out[,i]))
}
for (i in 2:17) {
hist(toua_no_out[,i], xlab = names(toua_no_out[i]), main = paste("Histogram of", names(toua_no_out[i])))
#ggplot2(toua_no_out, aes(x=names(toua_no_out[i])) + geom_histogram())
print(paste("Test de Shapiro pour la donnée", names(toua_no_out[i])))
print(shapiro.test(toua_no_out[,i]))
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(dplyr)
toua <- read.csv2("TOUA_phenotypes.csv")
head(toua)
toua_chl <- gather(data = toua_ch, key = "element", value = "valeur", 2:9)
head(toua_chl)
#unique(toua_chl$element)
# Suppression des anciennes colonnes
toua_no_out_no_ch <- subset (toua_no_out, select = -c(Fe_change:Cu_change))
#toua_no_out$C_change <- round(((toua$C_eCo2-toua$C_aCo2)/toua$C_aCo2)*100, digits = 2)
#toua_no_out$Cu_change <- round(((toua$Cu_eCo2-toua$Cu_aCo2)/toua$Cu_aCo2)*100, digits = 2)
head(toua_no_out_no_ch)
# Suppression des anciennes colonnes
toua_no_out_no_ch <- subset (toua_no_out, select = -c(Fe_change:Cu_change))
toua_no_out_no_ch <- subset(toua_no_out_no_ch, select = -c(N_change))
#toua_no_out$C_change <- round(((toua$C_eCo2-toua$C_aCo2)/toua$C_aCo2)*100, digits = 2)
#toua_no_out$Cu_change <- round(((toua$Cu_eCo2-toua$Cu_aCo2)/toua$Cu_aCo2)*100, digits = 2)
head(toua_no_out_no_ch)
ggplot(toua_chl, aes(x = element, y=valeur, fill = element)) +
geom_violin()+
ylim(-100,200)
i = 2
while (i < 17) {
print(paste("Test de Student entre les données", names(toua_no_out[i]), "et", names(toua_no_out[i+1])))
print(t.test(toua_no_out[,i+1], toua_no_out[,i], paired = TRUE))
i = i + 2
}
i = 2
while (i < 17) {
print(paste("Test de Student entre les données", names(toua_no_out[i]), "et", names(toua_no_out[i+1])))
print(Fligner.test(toua_no_out[,i+1], toua_no_out[,i], paired = TRUE))
i = i + 2
}
i = 2
while (i < 17) {
print(paste("Test de Student entre les données", names(toua_no_out[i]), "et", names(toua_no_out[i+1])))
print(fligner.test(toua_no_out[,i+1], toua_no_out[,i], paired = TRUE))
i = i + 2
}
toua_no_out_no_Mg <- subset (toua_no_out, select = -c(Mg_eCO2:Mg_aCO2))
toua_no_out_no_Mg <- subset (toua_no_out, select = -c(Mg_eCO2,Mg_aCO2))
toua_no_out_no_Mg <- subset (toua_no_out, select = -c(Mg_eCO2,Mg_aCO2))
toua_no_out_no_Mg <- subset (toua_no_out, select = -c(Mg_aCO2))
head(toua_no_out)
toua_no_out_no_Mg <- subset (toua_no_out, select = -c(Mg_eCo2,Mg_aCo2))
i = 2
while (i < 15) {
print(paste("Test de Student entre les données", names(toua_no_out_no_Mg[i]), "et", names(toua_no_out_no_Mg[i+1])))
print(fligner.test(toua_no_out_no_Mg[,i+1], toua_no_out_no_Mg[,i], paired = TRUE))
i = i + 2
}
toua_no_out_no_Mg <- subset (toua_no_out, select = -c(Mg_eCo2,Mg_aCo2))
i = 2
while (i < 15) {
print(paste("Test de Student entre les données", names(toua_no_out[i]), "et", names(toua_no_out[i+1])))
print(fligner.test(toua_no_out_no_Mg[,i+1], toua_no_out_no_Mg[,i], paired = TRUE))
i = i + 2
}
knitr::opts_chunk$set(echo = TRUE)
lang = lang[complete.cases(lang), ]
# supression des colonnes inutiles pour l'instant
lang_no_ch <- subset (lang, select = -c(N_change:Zn_change))
library(tidyr)
library(dplyr)
lang <- read.csv2("LANGUEDOC_phenotypes.csv")
head(lang)
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(dplyr)
lang <- read.csv2("LANGUEDOC_phenotypes.csv")
head(lang)
# supression des colonnes inutiles pour l'instant
lang_no_ch <- subset (lang, select = -c(N_change:Zn_change))
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(dplyr)
lang <- read.csv2("LANGUEDOC_phenotypes.csv")
head(lang)
# supression des colonnes inutiles pour l'instant
lang_no_ch <- subset (lang, select = -c(N_change:Zn_change))
langtest = lang_no_ch[complete.cases(lang_no_ch), ]
langtest[!grepl(".", langtest),]
langtest[!grepl(".", langtest),]
print(langtest[14,])
langtest[-c(13,109,116,123,131,150,151,179,180,187,189),]
print(langtest[13,])
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(dplyr)
lang <- read.table("LANGUEDOC_phenotypes.csv",sep=";",h=TRUE,na.strings = ".")
head(lang)
# supression des colonnes inutiles pour l'instant
lang_no_ch <- subset (lang, select = -c(N_change:Zn_change))
lang_clean = lang_no_ch[-c(10,13,109,116,123,131,150,151,179,180,187,189),]
print(lang_clean)
library(ggplot2)
ggplot(data= lang_clean, aes(x =Fe_aCo2, y = Fe_eCo2))+
geom_point()+
geom_abline(a=0, b=1,col="blue")
library(ggplot2)
ggplot(data= lang_clean, aes(x =Zn_aCo2, y = Zn_eCo2))+
geom_point()+
geom_abline(a=0, b=1,col="blue")
lang_no_out <- lang_clean
k= 3
for (i in 2:17) {
binf <- median(lang_clean[,i]) - k* mad(lang_clean[,i])
bsup <- median(lang_clean[,i]) + k* mad(lang_clean[,i])
outlier_idx <- which(lang_no_out[,i] < binf | lang_no_out[,i] > bsup)
if (length(outlier_idx) == 0) {
lang_no_out = lang_no_out
}
else{
lang_no_out = lang_no_out[-c(outlier_idx),]
}
print(outlier_idx)
}
i = 2
while (i < 17) {
print(
ggplot(data= lang_no_out, aes(x =lang_no_out[,i+1], y = lang_no_out[,i]))+
geom_point()+
xlab(colnames(lang)[i+1]) + ylab(colnames(lang)[i])+
geom_abline(a=0, b=1,col="blue")
)
i = i + 2}
library(reshape2)
library(ggplot2)
lang_long = melt(lang_no_out)
print(head(lang_long))
ggplot(data= lang_long, aes(x=variable, y=value))+
geom_violin(aes(fill=variable))+
geom_jitter(alpha=0.2)+
facet_wrap(~variable,scales ="free")+
ggtitle("Violin plots de chaque élément")
library(ggplot2)
library(RColorBrewer)
library(ggpubr)
lang_long = melt(lang_no_out)
lang_long$element = stringr::str_split_fixed(lang_long$variable, "_",2)[,1]
lang_long$Co2 = stringr::str_split_fixed(lang_long$variable, "_",2)[,2]
nb.cols <- 16
mycolors <- colorRampPalette(brewer.pal(8, "Paired"))(nb.cols)
ggplot(data = lang_long, aes(x = Co2, y = value)) +
geom_violin(aes(fill = variable), draw_quantiles = c(0.5)) +
facet_wrap( ~ element, scales = "free") +
scale_fill_manual(values = mycolors) +
stat_compare_means(paired = TRUE, method = "wilcox")
lang_no_out$N_change <- round(((lang_no_out$N_eCo2-lang_no_out$N_aCo2)/lang_no_out$N_aCo2)*100, digits = 2)
lang_no_out$Fe_change <- round(((lang_no_out$Fe_eCo2-lang_no_out$Fe_aCo2)/lang_no_out$Fe_aCo2)*100, digits = 2)
lang_no_out$Mg_change <- round(((lang_no_out$Mg_eCo2-lang_no_out$Mg_aCo2)/lang_no_out$Mg_aCo2)*100, digits = 2)
lang_no_out$Mn_change <- round(((lang_no_out$Mn_eCo2-lang_no_out$Mn_aCo2)/lang_no_out$Mn_aCo2)*100, digits = 2)
lang_no_out$Na_change <- round(((lang_no_out$Na_eCo2-lang_no_out$Na_aCo2)/lang_no_out$Na_aCo2)*100, digits = 2)
lang_no_out$Zn_change <- round(((lang_no_out$Zn_eCo2-lang_no_out$Zn_aCo2)/lang_no_out$Zn_aCo2)*100, digits = 2)
lang_no_out$C_change <- round(((lang_no_out$C_eCo2-lang_no_out$C_aCo2)/lang_no_out$C_aCo2)*100, digits = 2)
lang_no_out$Cu_change <- round(((lang_no_out$Cu_eCo2-lang_no_out$Cu_aCo2)/lang_no_out$Cu_aCo2)*100, digits = 2)
head(lang_no_out)
lang_ch <- select(lang_no_out,"genotype"|contains("change"))
lang_chl <- gather(data = lang_ch, key = "element", value = "valeur", 2:9)
head(lang_chl)
library(ggplot2)
library(hrbrthemes)
library(viridis)
ggplot(lang_chl, aes(element, valeur, fill = element))+
stat_summary(fun = mean, geom = "bar") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.2)+
geom_hline(yintercept = 0, color = "red", linetype = "dashed", size = 1) +
scale_fill_viridis_d() +
scale_color_viridis_d() +
theme_bw()
library(RColorBrewer)
library(ggpubr)
lang_long = melt(lang_no_out)
lang_long$element = stringr::str_split_fixed(lang_long$variable, "_",2)[,1]
lang_long$Co2 = stringr::str_split_fixed(lang_long$variable, "_",2)[,2]
nb.cols <- 16
mycolors <- colorRampPalette(brewer.pal(8, "Paired"))(nb.cols)
ggplot(data = lang_long, aes(x = Co2, y = value)) +
geom_violin(aes(fill = variable), draw_quantiles = c(0.5)) +
facet_wrap( ~ element, scales = "free") +
scale_fill_manual(values = mycolors) +
stat_compare_means(paired = TRUE, method = "wilcox")
library(ggplot2)
library(RColorBrewer)
library(ggpubr)
lang_long = melt(lang_no_out)
lang_long$element = stringr::str_split_fixed(lang_long$variable, "_",2)[,1]
lang_long$Co2 = stringr::str_split_fixed(lang_long$variable, "_",2)[,2]
nb.cols <- 16
mycolors <- colorRampPalette(brewer.pal(8, "Paired"))(nb.cols)
ggplot(data = lang_long, aes(x = Co2, y = value)) +
geom_violin(aes(fill = variable), draw_quantiles = c(0.5)) +
facet_wrap( ~ element, scales = "free") +
scale_fill_manual(values = mycolors) +
stat_compare_means(paired = TRUE, method = "wilcox")
lang_no_out_ch = lang_no_out
lang_no_out_ch$N_change <- round(((lang_no_out$N_eCo2-lang_no_out$N_aCo2)/lang_no_out$N_aCo2)*100, digits = 2)
lang_no_out_ch$Fe_change <- round(((lang_no_out$Fe_eCo2-lang_no_out$Fe_aCo2)/lang_no_out$Fe_aCo2)*100, digits = 2)
lang_no_out_ch$Mg_change <- round(((lang_no_out$Mg_eCo2-lang_no_out$Mg_aCo2)/lang_no_out$Mg_aCo2)*100, digits = 2)
lang_no_out_ch$Mn_change <- round(((lang_no_out$Mn_eCo2-lang_no_out$Mn_aCo2)/lang_no_out$Mn_aCo2)*100, digits = 2)
lang_no_out_ch$Na_change <- round(((lang_no_out$Na_eCo2-lang_no_out$Na_aCo2)/lang_no_out$Na_aCo2)*100, digits = 2)
lang_no_out_ch$Zn_change <- round(((lang_no_out$Zn_eCo2-lang_no_out$Zn_aCo2)/lang_no_out$Zn_aCo2)*100, digits = 2)
lang_no_out_ch$C_change <- round(((lang_no_out$C_eCo2-lang_no_out$C_aCo2)/lang_no_out$C_aCo2)*100, digits = 2)
lang_no_out_ch$Cu_change <- round(((lang_no_out$Cu_eCo2-lang_no_out$Cu_aCo2)/lang_no_out$Cu_aCo2)*100, digits = 2)
head(lang_no_out)
lang_ch <- select(lang_no_out,"genotype"|contains("change"))
lang_chl <- gather(data = lang_ch, key = "element", value = "valeur", 2:9)
head(lang_chl)
install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
lang_no_out_ch <- lang_no_out
lang_no_out_ch <- mutate(lang_no_out_ch,N_change = round(((lang_no_out$N_eCo2-lang_no_out$N_aCo2)/lang_no_out$N_aCo2)*100, digits = 2)
)
lang_no_out_ch <- mutate(lang_no_out_ch,Fe_change = round(((lang_no_out$Fe_eCo2-lang_no_out$Fe_aCo2)/lang_no_out$Fe_aCo2)*100, digits = 2)
)
lang_no_out_ch <- mutate(lang_no_out_ch,Mg_change = round(((lang_no_out$Mg_eCo2-lang_no_out$Mg_aCo2)/lang_no_out$Mg_aCo2)*100, digits = 2)
)
lang_no_out_ch <- mutate(lang_no_out_ch,Mn_change = round(((lang_no_out$Mn_eCo2-lang_no_out$Mn_aCo2)/lang_no_out$Mn_aCo2)*100, digits = 2)
)
lang_no_out_ch <- mutate(lang_no_out_ch,Na_change = round(((lang_no_out$Na_eCo2-lang_no_out$Na_aCo2)/lang_no_out$Na_aCo2)*100, digits = 2)
)
lang_no_out_ch <- mutate(lang_no_out_ch,Zn_change = round(((lang_no_out$Zn_eCo2-lang_no_out$Zn_aCo2)/lang_no_out$Zn_aCo2)*100, digits = 2)
)
lang_no_out_ch <- mutate(lang_no_out_ch,C_change = round(((lang_no_out$C_eCo2-lang_no_out$C_aCo2)/lang_no_out$C_aCo2)*100, digits = 2)
)
lang_no_out_ch <- mutate(lang_no_out_ch,Cu_change = round(((lang_no_out$Cu_eCo2-lang_no_out$Cu_aCo2)/lang_no_out$Cu_aCo2)*100, digits = 2)
)
head(lang_no_out_ch)
lang_ch <- select(lang_no_out_ch,"genotype"|contains("change"))
lang_chl <- gather(data = lang_ch, key = "element", value = "valeur", 2:9)
head(lang_chl)
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(dplyr)
reg <- read.table("REGMAP_phenotypes.csv",sep=";",h=TRUE,na.strings = ".")
head(reg)
View(reg)
# supression des colonnes inutiles pour l'instant
reg_no_ch <- subset (reg, select = -c(N_change:Zn_change))
reg_clean = reg_no_ch[-c(17,42),]
print(reg_clean)
library(ggplot2)
ggplot(data= reg_clean, aes(x =Fe_aCo2, y = Fe_eCo2))+
geom_point()+
geom_abline(a=0, b=1,col="blue")
library(ggplot2)
ggplot(data= reg_clean, aes(x =Zn_aCo2, y = Zn_eCo2))+
geom_point()+
geom_abline(a=0, b=1,col="blue")
View(lang_no_out)
reg_no_out <- reg_clean
k= 3
for (i in 2:17) {
binf <- median(reg_clean[,i]) - k* mad(reg_clean[,i])
bsup <- median(reg_clean[,i]) + k* mad(reg_clean[,i])
outlier_idx <- which(reg_no_out[,i] < binf | reg_no_out[,i] > bsup)
if (length(outlier_idx) == 0) {
reg_no_out = reg_no_out
}
else{
reg_no_out = reg_no_out[-c(outlier_idx),]
}
print(outlier_idx)
}
