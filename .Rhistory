library(RColorBrewer)
library(ggpubr)
toua_long = melt(toua_no_out_no_ch)
toua_long$element = stringr::str_split_fixed(toua_long$variable, "_",2)[,1]
toua$Co2 = stringr::str_split_fixed(toua_long$variable, "_",2)[,2]
View(toua_long)
library(reshape2)
library(ggplot2)
lang_long = melt(lang_no_out_no_ch)
library(reshape2)
library(ggplot2)
lang_long = melt(lang_no_out)
print(head(lang_long))
#lang_long$pvalue = stringr::str_split_fixed(lang_long$variable, "_",2)[,1]
ggplot(data= lang_long, aes(x=variable, y=value))+
geom_violin(aes(fill=variable))+
geom_jitter(alpha=0.2)+
facet_wrap(~variable,scales ="free")+
ggtitle("Violin plots de chaque élément")
View(lang_clean)
View(lang_no_out)
View(lang_no_out)
View(lang_no_ch)
library(reshape2)
library(ggplot2)
library(dplyr)
lang_no_out_no_ch = lang_no_out
lang_no_out_no_ch = subset (lang_no_out_no_ch, select = (-ends_with("change")))
library(reshape2)
library(ggplot2)
library(dplyr)
lang_no_out_no_ch = lang_no_out
lang_no_out_no_ch = subset (lang_no_out_no_ch, select = -c(N_change:Cu_change))
lang_long = melt(lang_no_out_no_ch)
print(head(lang_long))
#lang_long$pvalue = stringr::str_split_fixed(lang_long$variable, "_",2)[,1]
ggplot(data= lang_long, aes(x=variable, y=value))+
geom_violin(aes(fill=variable))+
geom_jitter(alpha=0.2)+
facet_wrap(~variable,scales ="free")+
ggtitle("Violin plots de chaque élément")
library(ggplot2)
library(RColorBrewer)
library(ggpubr)
lang_long = melt(lang_no_out_no_ch)
lang_long$element = stringr::str_split_fixed(lang_long$variable, "_",2)[,1]
lang_long$Co2 = stringr::str_split_fixed(lang_long$variable, "_",2)[,2]
nb.cols <- 16
mycolors <- colorRampPalette(brewer.pal(8, "Paired"))(nb.cols)
ggplot(data = lang_long, aes(x = Co2, y = value)) +
geom_violin(aes(fill = variable), draw_quantiles = c(0.5)) +
facet_wrap( ~ element, scales = "free") +
scale_fill_manual(values = mycolors) +
stat_compare_means(paired = TRUE, method = "wilcox")
View(toua_no_out_no_ch)
library(reshape2)
library(ggplot2)
#on met au format long
toua_no_out_no_ch = toua_no_out
toua_no_out_no_ch = subset (toua_no_out_no_ch, select = -c(N_change:eCN_aCN))
toua_long = melt(toua_no_out_no_ch)
print(head(toua_long))
ggplot(data= toua_long, aes(x=variable, y=value))+
geom_violin(aes(fill=variable))+
geom_jitter(alpha=0.2)+
facet_wrap(~variable,scales ="free")+
ggtitle("Violin plots de chaque élément")
View(toua_no_out_no_ch)
library(reshape2)
library(ggplot2)
#on met au format long
toua_no_out_no_ch = toua_no_out
toua_no_out_no_ch = subset (toua_no_out_no_ch, select = -c(N_change:eCN_aCN))
toua_no_out_no_ch = subset (toua_no_out_no_ch, select = -c(aCN_ratio:Cu_change))
toua_long = melt(toua_no_out_no_ch)
print(head(toua_long))
ggplot(data= toua_long, aes(x=variable, y=value))+
geom_violin(aes(fill=variable))+
geom_jitter(alpha=0.2)+
facet_wrap(~variable,scales ="free")+
ggtitle("Violin plots de chaque élément")
View(toua_no_out_no_ch)
#print(shapiro.test(toua_no_out[,i]))
ggplot(data= toua_long, aes(x=value))+
geom_histogram()+
facet_wrap(~variable,scales ="free")+
ggtitle("histogramme de chaque élément")+
stat_compare_means(method = t.test)
library(reshape2)
library(ggplot2)
#on met au format long
toua_no_out_no_ch = toua_no_out
toua_no_out_no_ch = subset (toua_no_out_no_ch, select = -c(N_change:eCN_aCN))
toua_no_out_no_ch = subset (toua_no_out_no_ch, select = -c(aCN_ratio:Cu_change))
toua_long = melt(toua_no_out_no_ch)
print(head(toua_long))
ggplot(data= toua_long, aes(x=variable, y=value))+
geom_violin(aes(fill=variable))+
geom_jitter(alpha=0.2)+
facet_wrap(~variable,scales ="free")+
ggtitle("Violin plots de chaque élément")+
stat_compare_means(method = t.test)
i = 2
while (i < 17) {
plot(toua_no_out[,i+1], toua_no_out[,i], xlab = names(toua_no_out[i+1]), ylab = names(toua_no_out[i]),asp=1)
abline(0,1, col = "blue")
i = i + 2}
ggplot(data= toua_long, aes(x=variable, y=value))+
geom_point()+
geom_jitter(alpha=0.2)+
facet_wrap(~variable,scales ="free")+
ggtitle("Scatter plots de chaque élément")+
i = 2
while (i < 17) {
plot(toua_no_out[,i+1], toua_no_out[,i], xlab = names(toua_no_out[i+1]), ylab = names(toua_no_out[i]),asp=1)
abline(0,1, col = "blue")
i = i + 2}
ggplot(data= toua_long, aes(x=variable, y=value))+
geom_point()+
geom_jitter(alpha=0.2)+
facet_wrap(~variable,scales ="free")+
ggtitle("Scatter plots de chaque élément")
i = 2
while (i < 17) {
plot(toua_no_out[,i+1], toua_no_out[,i], xlab = names(toua_no_out[i+1]), ylab = names(toua_no_out[i]),asp=1)
abline(0,1, col = "blue")
i = i + 2}
ggplot(data= toua_long, aes(x=variable, y=value))+
geom_point()+
geom_jitter(alpha=0.2)+
facet_wrap(~variable,scales ="free")+
ggtitle("Scatter plots de chaque élément")
i = 2
while (i < 17) {
plot(toua_no_out[,i+1], toua_no_out[,i], xlab = names(toua_no_out[i+1]), ylab = names(toua_no_out[i]),asp=1)
abline(0,1, col = "blue")
i = i + 2}
ggplot(data= toua_long, aes(x=variable, y=value))+
geom_point()+
facet_wrap(~variable,scales ="free")+
ggtitle("Scatter plots de chaque élément")
i = 2
while (i < 17) {
plot(toua_no_out[,i+1], toua_no_out[,i], xlab = names(toua_no_out[i+1]), ylab = names(toua_no_out[i]),asp=1)
abline(0,1, col = "blue")
i = i + 2}
ggplot(data= toua_no_out, aes(x=variable, y=value))+
geom_point()+
facet_wrap(~variable,scales ="free")+
ggtitle("Scatter plots de chaque élément")
i = 2
while (i < 17) {
plot(toua_no_out[,i+1], toua_no_out[,i], xlab = names(toua_no_out[i+1]), ylab = names(toua_no_out[i]),asp=1)
abline(0,1, col = "blue")
i = i + 2}
ggplot(data= toua_long, aes(x=variable, y=value))+
geom_point()+
facet_wrap(~variable,scales ="free")+
ggtitle("Scatter plots de chaque élément")
i = 2
while (i < 17) {
plot(toua_no_out[,i+1], toua_no_out[,i], xlab = names(toua_no_out[i+1]), ylab = names(toua_no_out[i]),asp=1)
abline(0,1, col = "blue")
i = i + 2}
library(reshape2)
library(ggplot2)
#on met au format long
toua_no_out_no_ch = toua_no_out
toua_no_out_no_ch = subset (toua_no_out_no_ch, select = -c(N_change:eCN_aCN))
toua_no_out_no_ch = subset (toua_no_out_no_ch, select = -c(aCN_ratio:Cu_change))
toua_long = melt(toua_no_out_no_ch)
print(head(toua_long))
ggplot(data= toua_long, aes(x=variable, y=value))+
geom_violin(aes(fill=variable, draw_quantiles = c(0.5)))+
geom_jitter(alpha=0.2)+
facet_wrap(~variable,scales ="free")+
ggtitle("Violin plots de chaque élément")+
stat_compare_means(method = t.test)
View(lang_no_out_no_ch)
library(ggplot2)
library(RColorBrewer)
toua_long = melt(toua_no_out_no_ch)
toua_long$element = stringr::str_split_fixed(toua_long$variable, "_",2)[,1]
toua$Co2 = stringr::str_split_fixed(toua_no_out_no_ch$variable, "_",2)[,2]
library(ggplot2)
library(RColorBrewer)
toua_long = melt(toua_no_out_no_ch)
toua_long$element = stringr::str_split_fixed(toua_long$variable, "_",2)[,1]
toua_long$Co2 = stringr::str_split_fixed(toua_long$variable, "_",2)[,2]
nb.cols <- 16
mycolors <- colorRampPalette(brewer.pal(8, "Paired"))(nb.cols)
ggplot(data = toua_long, aes(x = Co2, y = value)) +
geom_violin(aes(fill = variable), draw_quantiles = c(0.5)) +
facet_wrap( ~ element, scales = "free") +
scale_fill_manual(values = mycolors) +
stat_compare_means(paired = TRUE, method = "wilcox")
attach(toua)
plot(Fe_aCo2, Fe_eCo2, main="Scatterplot Fe",
xlab="Fe_aCo2", ylab="Fe_eCo2", pch=19)
abline(0,1, col = "blue")
abline(lm(Fe_eCo2~Fe_aCo2), col="red") # regression line (y~x)
attach(toua)
plot(Fe_aCo2, Fe_eCo2, main="Scatterplot Fe",
xlab="Fe_aCo2", ylab="Fe_eCo2", pch=19)
abline(0,1, col = "blue")
abline(lm(Fe_eCo2~Fe_aCo2), col="red") # regression line (y~x)
attach(toua)
plot(Zn_aCo2, Zn_eCo2, main="Scatterplot Zinc",
xlab="Zn_aCo2", ylab="Zn_eCo2")
abline(lm(Zn_eCo2~Zn_aCo2), col="red") # regression line (y~x)
abline(0,1, col = "blue")
i = 2
while (i < 17) {
plot(toua_no_out[,i+1], toua_no_out[,i], xlab = names(toua_no_out[i+1]), ylab = names(toua_no_out[i]),asp=1)
abline(0,1, col = "blue")
i = i + 2}
i=2
while (i < 17) {
plot_paired <- ggpaired(toua_no_out, cond1 = names(toua_no_out[i+1]) , cond2 = names(toua_no_out[i]),
line.color = "dark gray", line.size = 0.6, color = "condition",
width = 0.7, linetype = "dotted" ,
palette = "aas")+
stat_compare_means(paired = TRUE)
print(plot_paired)
i = i+2
}
#print(shapiro.test(toua_no_out[,i]))
ggplot(data= toua_long, aes(x=value))+
geom_histogram()+
facet_wrap(~variable,scales ="free")+
ggtitle("histogramme de chaque élément")
i = 2
while (i < 17) {
print(paste("Test de Shapiro entre les données", names(toua_no_out[i]), "et", names(toua_no_out[i+1])))
print(shapiro.test(toua_no_out[,i+1], toua_no_out[,i], paired = TRUE)$p.value)
i = i + 2
}
i = 2
while (i < 17) {
print(paste("Test de Shapiro entre les données", names(toua_no_out[i]), "et", names(toua_no_out[i+1])))
print(shapiro.test(toua_no_out[,i])$p.value)
i = i + 2
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(dplyr)
reg <- read.table("REGMAP_phenotypes.csv",sep=";",h=TRUE,na.strings = ".")
head(reg)
# supression des colonnes inutiles pour l'instant
reg_no_ch <- subset (reg, select = -c(N_change:Zn_change))
reg_clean = reg_no_ch[-c(17,42),]
print(reg_clean)
library(ggplot2)
ggplot(data= reg_clean, aes(x =Fe_aCo2, y = Fe_eCo2))+
geom_point()+
geom_abline(a=0, b=1,col="blue")
library(ggplot2)
ggplot(data= reg_clean, aes(x =Zn_aCo2, y = Zn_eCo2))+
geom_point()+
geom_abline(a=0, b=1,col="blue")
reg_no_out <- reg_clean
k= 3
for (i in 2:17) {
binf <- median(reg_clean[,i]) - k* mad(reg_clean[,i])
bsup <- median(reg_clean[,i]) + k* mad(reg_clean[,i])
outlier_idx <- which(reg_no_out[,i] < binf | reg_no_out[,i] > bsup)
if (length(outlier_idx) == 0) {
reg_no_out = reg_no_out
}
else{
reg_no_out = reg_no_out[-c(outlier_idx),]
}
print(outlier_idx)
}
library(tidyverse)
reg_no_out_ch <- reg_no_out
reg_no_out_ch <- mutate(reg_no_out_ch,N_change = round(((reg_no_out$N_eCo2-reg_no_out$N_aCo2)/reg_no_out$N_aCo2)*100, digits = 2)
)
reg_no_out_ch <- mutate(reg_no_out_ch,Fe_change = round(((reg_no_out$Fe_eCo2-reg_no_out$Fe_aCo2)/reg_no_out$Fe_aCo2)*100, digits = 2)
)
reg_no_out_ch <- mutate(reg_no_out_ch,Mg_change = round(((reg_no_out$Mg_eCo2-reg_no_out$Mg_aCo2)/reg_no_out$Mg_aCo2)*100, digits = 2)
)
reg_no_out_ch <- mutate(reg_no_out_ch,Mn_change = round(((reg_no_out$Mn_eCo2-reg_no_out$Mn_aCo2)/reg_no_out$Mn_aCo2)*100, digits = 2)
)
reg_no_out_ch <- mutate(reg_no_out_ch,Na_change = round(((reg_no_out$Na_eCo2-reg_no_out$Na_aCo2)/reg_no_out$Na_aCo2)*100, digits = 2)
)
reg_no_out_ch <- mutate(reg_no_out_ch,Zn_change = round(((reg_no_out$Zn_eCo2-reg_no_out$Zn_aCo2)/reg_no_out$Zn_aCo2)*100, digits = 2)
)
reg_no_out_ch <- mutate(reg_no_out_ch,C_change = round(((reg_no_out$C_eCo2-reg_no_out$C_aCo2)/reg_no_out$C_aCo2)*100, digits = 2)
)
reg_no_out_ch <- mutate(reg_no_out_ch,Cu_change = round(((reg_no_out$Cu_eCo2-reg_no_out$Cu_aCo2)/reg_no_out$Cu_aCo2)*100, digits = 2)
)
head(reg_no_out_ch)
reg_ch <- select(reg_no_out_ch,"genotype"|contains("change"))
reg_chl <- gather(data = reg_ch, key = "element", value = "valeur", 2:9)
head(reg_chl)
library(ggplot2)
library(hrbrthemes)
library(viridis)
ggplot(reg_chl, aes(element, valeur, fill = element))+
stat_summary(fun = mean, geom = "bar") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.2)+
geom_hline(yintercept = 0, color = "red", linetype = "dashed", size = 1) +
scale_fill_viridis_d() +
scale_color_viridis_d() +
theme_bw()
i = 2
while (i < 17) {
print(
ggplot(data= reg_no_out, aes(x =reg_no_out[,i+1], y = reg_no_out[,i]))+
geom_point()+
xlab(colnames(reg)[i+1]) + ylab(colnames(reg)[i])+
geom_abline(slope = 1, intercept = 1,col="blue")
)
i = i + 2}
library(reshape2)
library(ggplot2)
reg_long = melt(reg_no_out)
print(head(reg_long))
ggplot(data= reg_long, aes(x=variable, y=value))+
geom_violin(aes(fill=variable))+
geom_jitter(alpha=0.2)+
facet_wrap(~variable,scales ="free")+
ggtitle("Violin plots de chaque élément")
library(ggplot2)
library(RColorBrewer)
library(ggpubr)
reg_long = melt(reg_no_out)
reg_long$element = stringr::str_split_fixed(reg_long$variable, "_",2)[,1]
reg_long$Co2 = stringr::str_split_fixed(reg_long$variable, "_",2)[,2]
nb.cols <- 16
mycolors <- colorRampPalette(brewer.pal(8, "Paired"))(nb.cols)
ggplot(data = reg_long, aes(x = Co2, y = value)) +
geom_violin(aes(fill = variable), draw_quantiles = c(0.5)) +
facet_wrap( ~ element, scales = "free") +
scale_fill_manual(values = mycolors) +
stat_compare_means(paired = TRUE, method = "wilcox")
i = 2
while (i < 17) {
print(
ggplot(data= lang_no_out, aes(x =lang_no_out[,i+1], y = lang_no_out[,i]))+
geom_point()+
xlab(colnames(lang)[i+1]) + ylab(colnames(lang)[i])+
geom_abline(slope = 1, intercept = 1,col="blue")
)
i = i + 2}
#print(shapiro.test(toua_no_out[,i]))
ggplot(data= lang_long, aes(x=value))+
geom_histogram()+
facet_wrap(~variable,scales ="free")+
ggtitle("histogramme de chaque élément")
i = 2
while (i < 17) {
print(paste("Test de Shapiro entre les données", names(lang_no_out[i]), "et", names(lang_no_out[i+1])))
print(shapiro.test(lang_no_out[,i])$p.value)
i = i + 2
}
library(ggplot2)
library(RColorBrewer)
library(ggpubr)
lang_long = melt(lang_no_out_no_ch)
lang_long$element = stringr::str_split_fixed(lang_long$variable, "_",2)[,1]
lang_long$Co2 = stringr::str_split_fixed(lang_long$variable, "_",2)[,2]
nb.cols <- 16
mycolors <- colorRampPalette(brewer.pal(8, "Paired"))(nb.cols)
ggplot(data = lang_long, aes(x = Co2, y = value)) +
geom_violin(aes(fill = variable), draw_quantiles = c(0.5)) +
facet_wrap( ~ element, scales = "free") +
scale_fill_manual(values = mycolors) +
stat_compare_means(paired = TRUE, method = "wilcox")
i=2
while (i < 17) {
plot_paired <- ggpaired(toua_no_out, cond1 = names(lang_no_out[i+1]) , cond2 = names(lang_no_out[i]),
line.color = "dark gray", line.size = 0.6, color = "condition",
width = 0.7, linetype = "dotted" ,
palette = "aas")+
stat_compare_means(paired = TRUE)
print(plot_paired)
i = i+2
}
i = 2
while (i < 17) {
print(paste("Test de Student entre les données", names(toua_no_out[i]), "et", names(toua_no_out[i+1])))
print(paste("p-value = ",t.test(toua_no_out[,i+1], toua_no_out[,i], paired = TRUE)$p.value))
i = i + 2
}
toua_no_out_no_Mg <- subset (toua_no_out, select = -c(Mg_eCo2,Mg_aCo2))
i = 2
while (i < 15) {
print(paste("Test de Fligner-Kileen's entre les données", names(toua_no_out[i]), "et", names(toua_no_out[i+1])))
print(paste("p-value = ",fligner.test(toua_no_out_no_Mg[,i+1], toua_no_out_no_Mg[,i], paired = TRUE)$p.value))
i = i + 2
}
library(reshape2)
library(ggplot2)
library(dplyr)
lang_no_out_no_ch = lang_no_out
lang_no_out_no_ch = subset (lang_no_out_no_ch, select = -c(N_change:Cu_change))
lang_long = melt(lang_no_out_no_ch)
print(head(lang_long))
#lang_long$pvalue = stringr::str_split_fixed(lang_long$variable, "_",2)[,1]
ggplot(data= lang_long, aes(x=variable, y=value))+
geom_violin(aes(fill=variable))+
geom_jitter(alpha=0.2)+
facet_wrap(~variable,scales ="free")+
ggtitle("Violin plots de chaque élément")
View(lang_no_out_no_ch)
View(lang_no_out)
library(reshape2)
library(ggplot2)
library(dplyr)
lang_no_out_no_ch = lang_no_out
lang_no_out_no_ch = subset (lang_no_out_no_ch, select = -c(N_change:Cu_change))
lang_long = melt(lang_no_out_no_ch)
print(head(lang_long))
#lang_long$pvalue = stringr::str_split_fixed(lang_long$variable, "_",2)[,1]
ggplot(data= lang_long, aes(x=variable, y=value))+
geom_violin(aes(fill=variable))+
geom_jitter(alpha=0.2)+
facet_wrap(~variable,scales ="free")+
ggtitle("Violin plots de chaque élément")
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(dplyr)
lang <- read.table("LANGUEDOC_phenotypes.csv",sep=";",h=TRUE,na.strings = ".")
head(lang)
# supression des colonnes inutiles pour l'instant
lang_no_ch <- subset (lang, select = -c(N_change:Zn_change))
lang_clean = lang_no_ch[-c(10,13,109,116,123,131,150,151,179,180,187,189),]
print(lang_clean)
library(ggplot2)
ggplot(data= lang_clean, aes(x =Fe_aCo2, y = Fe_eCo2))+
geom_point()+
geom_abline(a=0, b=1,col="blue")
library(ggplot2)
ggplot(data= lang_clean, aes(x =Zn_aCo2, y = Zn_eCo2))+
geom_point()+
geom_abline(a=0, b=1,col="blue")
lang_no_out <- lang_clean
k= 3
for (i in 2:17) {
binf <- median(lang_clean[,i]) - k* mad(lang_clean[,i])
bsup <- median(lang_clean[,i]) + k* mad(lang_clean[,i])
outlier_idx <- which(lang_no_out[,i] < binf | lang_no_out[,i] > bsup)
if (length(outlier_idx) == 0) {
lang_no_out = lang_no_out
}
else{
lang_no_out = lang_no_out[-c(outlier_idx),]
}
print(outlier_idx)
}
library(tidyverse)
lang_no_out_ch <- lang_no_out
lang_no_out_ch <- mutate(lang_no_out_ch,N_change = round(((lang_no_out$N_eCo2-lang_no_out$N_aCo2)/lang_no_out$N_aCo2)*100, digits = 2)
)
lang_no_out_ch <- mutate(lang_no_out_ch,Fe_change = round(((lang_no_out$Fe_eCo2-lang_no_out$Fe_aCo2)/lang_no_out$Fe_aCo2)*100, digits = 2)
)
lang_no_out_ch <- mutate(lang_no_out_ch,Mg_change = round(((lang_no_out$Mg_eCo2-lang_no_out$Mg_aCo2)/lang_no_out$Mg_aCo2)*100, digits = 2)
)
lang_no_out_ch <- mutate(lang_no_out_ch,Mn_change = round(((lang_no_out$Mn_eCo2-lang_no_out$Mn_aCo2)/lang_no_out$Mn_aCo2)*100, digits = 2)
)
lang_no_out_ch <- mutate(lang_no_out_ch,Na_change = round(((lang_no_out$Na_eCo2-lang_no_out$Na_aCo2)/lang_no_out$Na_aCo2)*100, digits = 2)
)
lang_no_out_ch <- mutate(lang_no_out_ch,Zn_change = round(((lang_no_out$Zn_eCo2-lang_no_out$Zn_aCo2)/lang_no_out$Zn_aCo2)*100, digits = 2)
)
lang_no_out_ch <- mutate(lang_no_out_ch,C_change = round(((lang_no_out$C_eCo2-lang_no_out$C_aCo2)/lang_no_out$C_aCo2)*100, digits = 2)
)
lang_no_out_ch <- mutate(lang_no_out_ch,Cu_change = round(((lang_no_out$Cu_eCo2-lang_no_out$Cu_aCo2)/lang_no_out$Cu_aCo2)*100, digits = 2)
)
head(lang_no_out_ch)
lang_ch <- select(lang_no_out_ch,"genotype"|contains("change"))
lang_chl <- gather(data = lang_ch, key = "element", value = "valeur", 2:9)
head(lang_chl)
library(ggplot2)
library(hrbrthemes)
library(viridis)
ggplot(lang_chl, aes(element, valeur, fill = element))+
stat_summary(fun = mean, geom = "bar") +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.2)+
geom_hline(yintercept = 0, color = "red", linetype = "dashed", size = 1) +
scale_fill_viridis_d() +
scale_color_viridis_d() +
theme_bw()
i = 2
while (i < 17) {
print(
ggplot(data= lang_no_out, aes(x =lang_no_out[,i+1], y = lang_no_out[,i]))+
geom_point()+
xlab(colnames(lang)[i+1]) + ylab(colnames(lang)[i])+
geom_abline(slope = 1, intercept = 1,col="blue")
)
i = i + 2}
library(reshape2)
library(ggplot2)
library(dplyr)
lang_no_out_no_ch = lang_no_out
lang_no_out_no_ch = subset(lang_no_out_no_ch, select = -c(N_change:Cu_change))
#reg_no_out_no_Mg <- subset (reg_no_out, select = -c(Mg_eCo2,Mg_aCo2))
i = 2
while (i < 15) {
print(paste("Test de Fligner-Kileen's entre les données", names(reg_no_out[i]), "et", names(reg_no_out[i+1])))
print(paste("p-value = ",fligner.test(reg_no_out_no_Mg[,i+1], reg_no_out_no_Mg[,i], paired = TRUE)$p.value))
i = i + 2
}
#reg_no_out_no_Mg <- subset (reg_no_out, select = -c(Mg_eCo2,Mg_aCo2))
i = 2
while (i < 15) {
print(paste("Test de Fligner-Kileen's entre les données", names(reg_no_out[i]), "et", names(reg_no_out[i+1])))
print(paste("p-value = ",fligner.test(reg_no_out[,i+1], reg_no_out[,i], paired = TRUE)$p.value))
i = i + 2
}
